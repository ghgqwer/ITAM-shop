import { isArrayEqual, isObjectEqual, isPrimitiveEqual, isNil, isObject } from './equal';
export class Compare {
    instance;
    prevProps;
    styleKeys = [
        'stroke',
        'color',
        'weight',
        'opacity',
        'lineCap',
        'lineJoin',
        'dashArray',
        'dashOffset',
        'fill',
        'fillColor',
        'fillOpacity',
        'fillRule',
        'renderer',
        'className'
    ];
    constructor(instance, props) {
        this.instance = instance;
        this.prevProps = props;
    }
    firstLetterUpper(str) {
        return str[0].toUpperCase() + str.slice(1);
    }
    storeProps(props) {
        this.prevProps = props;
    }
    updateProps(curProps) {
        Object.keys(curProps).forEach((key) => {
            const curVal = curProps[key];
            const prevVal = this.prevProps[key];
            if (key === 'options') {
                const prevOptions = prevVal;
                const curOptions = curVal;
                let styles = {};
                Object.keys(curOptions).forEach((optionKey) => {
                    const curOptionVal = curOptions?.[optionKey];
                    const prevOptionVal = prevOptions?.[optionKey];
                    // @ts-expect-error key is string
                    if (this.styleKeys.includes(optionKey)) {
                        // collect changed style
                        if (this.shouldUpdate(prevOptionVal, curOptionVal)) {
                            styles[optionKey] = curOptionVal;
                        }
                        // return;
                    }
                    // e.g. TileLyaer opacity directly use setOpacity
                    if (this.shouldUpdate(prevOptionVal, curOptionVal)) {
                        const funcName = optionKey === 'center' ? 'setView' : `set${this.firstLetterUpper(optionKey)}`;
                        this.executeUpdate(funcName, curOptionVal);
                    }
                });
                if (Object.keys(styles).length) {
                    const funcName = 'setStyle';
                    this.executeUpdate(funcName, styles);
                    styles = {};
                }
                return;
            }
            if (this.shouldUpdate(prevVal, curVal)) {
                const funcName = `set${this.firstLetterUpper(key)}`;
                this.executeUpdate(funcName, curVal);
            }
        });
    }
    shouldUpdate(prevVal, curVal) {
        if (Array.isArray(prevVal) && Array.isArray(curVal)) {
            return !isArrayEqual(prevVal, curVal);
        }
        if (isObject(prevVal) && isObject(curVal)) {
            return !isObjectEqual(prevVal, curVal);
        }
        return !isPrimitiveEqual(prevVal, curVal) && !isNil(curVal);
    }
    executeUpdate(funcName, value) {
        // @ts-expect-error map instance update functions
        this.instance[funcName]?.(value);
    }
}
