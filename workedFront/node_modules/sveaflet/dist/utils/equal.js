function getType(value) {
    return Object.prototype.toString.call(value);
}
export function isNil(value) {
    return value === undefined || value === null || value === '';
}
export function isObject(value) {
    return getType(value) === '[object Object]';
}
export function isArrayEqual(prevArr, curArr) {
    if (prevArr.length !== curArr.length) {
        return false;
    }
    return curArr.every((element) => prevArr.includes(element));
}
export function isObjectEqual(prevObj, curObj) {
    const prevObjKeys = Object.keys(prevObj);
    const curObjKeys = Object.keys(curObj);
    if (prevObjKeys.length !== curObjKeys.length) {
        return false;
    }
    for (const key in curObjKeys) {
        if (curObj[key] !== prevObj[key]) {
            return false;
        }
    }
    return true;
}
export function isPrimitiveEqual(prevVal, curVal) {
    if (getType(prevVal) !== getType(curVal)) {
        return false;
    }
    else {
        return prevVal === curVal;
    }
}
